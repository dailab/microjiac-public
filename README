MicroJIAC - A Lightweight Agent Framework

-----------------------------------------
README - Contents
-----------------------------------------
1. Meaning of "MicroJIAC"
2. Deploying MicroJIAC
3. Building SunSPOT-related modules
-----------------------------------------


1. Meaning of "MicroJIAC"
=========================

"Micro" is supposed to mean small, lightweight and is similiar to the
meaning of "Java Microedition".
"JIAC" initially meant "Java Intelligent Agent Componentware". As the
agent models and structures of the JIAC framework and MicroJIAC
diverge heavily, a better translation of "JIAC" would be
"JIAC Incompatible Agent Componentware". The interoperability of both
frameworks is given through the communication.

For more information see:
	o http://www.jiac.de
	o http://www.dai-labor.de



2. Deploying MicroJIAC
======================

The deployment of MicroJIAC requires specific variables to be
available in your settings.xml. This is done by creating a profile
and declaring the following properties:

	o release-repo-id			id of a maven release repository
	o release-repo-url			and its deployment url
	o snapshot-repo-id			id of a maven snapshot repository
	o snapshot-repo-url			and its deployment url

For example, to deploy to the sonatype staging repositories, I 
specified the following:

<!-- ... -->
<profile>
	<id>sonatype</id>
	<properties>
		<release-repo-id>oss-sonatype-staging</release-repo-id>
		<release-repo-url>https://oss.sonatype.org/service/local/staging/deploy/maven2</release-repo-url>
		<snapshot-repo-id>oss-sonatype-snapshots</snapshot-repo-id>
		<snapshot-repo-url>https://oss.sonatype.org/content/repositories/snapshots</snapshot-repo-url>
	</properties>
</profile>
<!-- ... -->

Deploying the site require two more variables:

	o site-repo-id				id of a site repository
	o site-repo-url				and its deployment url



3. Building SunSPOT-related modules
===================================

To build all SunSPOT related modules (like the microjiac-sunspot-extensions)
you have to install a recent SunSPOT SDK (red or later) and specify a
property in your settings.xml:

	o sunspot-sdk-path			the path to you SunSPOT SDK

For example, I specified the following:
<!-- ... -->
<activeProfiles>
	<activeProfile>global-properties</activeProfile>
</activeProfiles>
<profiles>
	<profile>
		<id>global-properties</id>
		<properties>
			<sunspot-sdk-path>/home/marcel/SunSPOT/red</sunspot-sdk-path>
		</properties>
	</profile>
<!-- ... -->

If specified correctly all SunSPOT related modules will be automatically
included into the maven build.